openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'QCon - Quiz Contest'
  description: 'This is a real time Quiz Contest Project. This project was build in microservice architecture with its high performance and scalibility by using modern technologies such as Redis and RabbitMQ for caching and internal server communications. The most importent part is we used CICD approach for the development of this project such as Dockerise of all individual services and Automate-Testing the services using github Actions and sharing The images through dockerhub.'
  contact:
    name: QCon
    url: https://qcon.com
    email: support@qcon.com
servers:
  - description: Dev
    url: 'http://localhost:4000/api/v1'
tags:
  - name: User
    description: User Endpoints (public + private)
  - name: Contest
    description: Article Endpoints (private, student, teacher)
  - name: Result
    description: Comment Endpoints (Private, student, teacher)
  - name: Academic
    description: Comment Endpoints (Private, teacher)
  - name: Question
    description: Comment Endpoints (Private, teacher)
  
paths:
  '/user/signup':
    post:
      description: create a new student
      tags: [User]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: prince Mahim
                email:
                  type: string
                  format: email
                  example: prince@qcon.com
                password:
                  type: string
                  format: password
                  example: PassWord123
              required: [name, email, password]
      responses:
        '201':
          description: Signup successul
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Signup successful
      
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'
  '/user/signin':
    post:
      description: Login to your account
      tags: [User]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: student@qcon.com
                password:
                  type: string
                  format: password
                  example: PassWord123
              required: [email, password]
      responses:
        '200':
          description: Signin successful
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Signin successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
                  
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'
  '/users/profile':
    get:
      security:
        - bearerAuth: []
      tags: [User]
      description: Get profile Data of logged in user
      responses:
        '200':
          description: Return an object of user data
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: user_1
                            email:
                              type: string
                              example: user@gmail.com
                          # required: [id, name, email]
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  '/users/{id}':
    get:
      operationId: get user by id
      tags: [User]
      description: Get user By Id
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Return a list of Contests
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: Mr. User
                            email:
                              type: string
                              example: mruser@qcon.com
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/contests':
    get:
      tags: [Contest]
      description: Retrive all Contests
      # parameters:
      #   - $ref: '#/components/parameters/limitParam'
      #   - $ref: '#/components/parameters/sortTypeParam'
      #   - $ref: '#/components/parameters/sortByParam'
      #   - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          description: Return a list of Contests
          content:
            'application/json':
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        id:
                          type: integer
                          format: int32
                          example: 1
                        name:
                          type: string
                          example: my Contest
                        time:
                          type: string
                          format: date-time
                          example: 2024-06-23T10:05:00.000Z
                        duration_munite:
                          type: integer
                          format: int32
                          example: 30
                        total_marks:
                          type: integer
                          format: int32
                          example: 50
                        pass_marks:
                          type: integer
                          format: int32
                          example: 25
                        negative_marks:
                          type: number
                          format: float
                          example: 0.25
                        class_id:
                          type: integer
                          format: int32
                          example: 25
                        course_id:
                          type: integer
                          format: int32
                          example: 2
                        added_by:
                          type: integer
                          format: int32
                          example: 3
                      #   author:
                      #     $ref: '#/components/schemas/AuthorDTO'
                      #   link:
                      #     type: string
                      #     format: url
                      #     example: '/articles/1'
                      # required: [id, title, author]
                    # - $ref: '#/components/schemas/Timestamp'
              # pagination:
              #   $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'
  '/contest':
    post:
      operationId: createPost
      security:
        - bearerAuth: []
      tags: [Contest]
      description: Create a new contest
      requestBody:
        description: Only teacher can create new contest
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "First Contest"
                time:
                  type: string
                  format: date-time
                  example: "2024-06-26T01:38"
                durationMunite:
                  type: integer
                  format: int32
                  example: 60
                total_marks:
                  type: integer
                  format: int32
                  example: 100
                pass_marks:
                  type: integer
                  format: int32
                  example: 40
                negative_marks:
                  type: number
                  format: float
                  example: 0.25
                questions_ids:
                  type: string
                  format: text
                  example: "1,2,3,4,5,6,7,8,9,10"
                class_id:
                  type: integer
                  format: int32
                  example: 40
                course_id:
                  type: integer
                  format: int32
                  example: 40
      responses:
        '201':
          description: Successfully created a new article
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CreateContest'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/contests/{id}':
    get:
      tags: [Contest]
      description: Get Contest by Id
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: 'Single Contest view'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Contest'
                      - type: object
                        properties:
                          author:
                            $ref: '#/components/schemas/AuthorDTO'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      security:
        - bearerAuth: []
      tags: [Article]
      description: Create or update entire article
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  example: 1
                title:
                  type: string
                  example: article title
                body:
                  type: string
                  format: text
                  example: article body
                cover:
                  type: string
                  format: url
                  example: 'https://s3.aws.myblog.com/221ddw34'
                status:
                  type: string
                  enum: [draft, published]
                  example: draft
              required: [title, body]
      responses:
        '200':
          description: 'Successfully Updated'
          # content: &article_update_content
          #   'application/json':
          #     schema:
          #       $ref: '#/components/schemas/ArticleUpdateDTO'
        '201':
          description: 'Successfully Created'
          # content:
          #   'application/json':
          #     schema:
          #       $ref: '#/components/schemas/ArticleCreateDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      security:
        - bearerAuth: []
      tags: [Article]
      description: Partially update an article
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: article title
                body:
                  type: string
                  format: text
                  example: article body
                cover:
                  type: string
                  format: url
                  example: 'https://s3.aws.myblog.com/221ddw34'
                status:
                  type: string
                  enum: [draft, published]
                  example: draft
      responses:
        '200':
          description: 'Successfully Updated'
          # content:
          #   'application/json':
          #     schema:
          #       $ref: '#/components/schemas/ArticleUpdateDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - bearerAuth: []
      tags: [Article]
      description: Delete an article by id
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: 'Article deleted successfully'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Contest:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            name:
              type: string
              example: First Contest
            time:
              type: string
              format: date-time
              example: 2024-06-23T10:05:00.000Z
            duration_munite:
              type: integer
              format: int32
              example: 30
            total_marks:
              type: integer
              format: int32
              example: 50
            pass_marks:
              type: integer
              format: int32
              example: 25
            negative_marks:
              type: number
              format: float
              example: 0.25
            class_id:
              type: integer
              format: int32
              example: 10
            course_id:
              type: integer
              format: int32
              example: 1
            added_by:
              type: integer
              format: int32
              example: 3
        #   required: [id, authorId, title, body, status]
        # - $ref: '#/components/schemas/Timestamp'
    CreateContest:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: 'Contest created successfully'
        contest_id:
          type: string
          example: '1'
    User:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            name:
              type: string
              example: Student
            email:
              type: string
              format: email
              example: student@gmail.com
            role:
              type: string
              enum:
                - superAdmin
                - admin
                - teacher
                - student
              example: student
            
          required: [id, name, email]
        - $ref: '#/components/schemas/Timestamp'
    # UserCreateDTO:
    #   type: object
    #   properties:
    #     code:
    #       type: integer
    #       format: int32
    #       example: 201
    #     message:
    #       type: string
    #       example: 'User created successfully'
    #     data:
    #       $ref: '#/components/schemas/User'
    #     links:
    #       type: object
    #       properties:
    #         self:
    #           type: string
    #           format: url
    #           example: '/articles/1'
    #         edit:
    #           type: string
    #           format: url
    #           example: '/users/1/edit'
    #         delete:
    #           type: string
    #           format: url
    #           example: '/users/1/delete'
    #         view:
    #           type: string
    #           format: url
    #           example: '/users/1/view'
    # ArticleUpdateDTO:
    #   type: object
    #   properties:
    #     code:
    #       type: integer
    #       format: int32
    #       example: 200
    #     message:
    #       type: string
    #       example: Article updated successfully
    #     data:
    #       $ref: '#/components/schemas/Article'
    #     links:
    #       type: object
    #       properties:
    #         self:
    #           type: string
    #           example: '/articles/1'
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [createdAt, updatedAt]
    AuthorDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: 'A.B Raihan'
      required: [id, name]
  responses:
    '500':
      description: 'Internal Server Error'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: We are sorry for the inconvenience. Please try again later
    '400':
      description: 'Bad Request'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email
                    in:
                      type: string
                      enum: [query, body]
                      example: body
    '401':
      description: Unauthorized
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permissions
    '404':
      description: Resource Not Found
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
  parameters:
    userId:
      in: path
      name: userId
      description: specific userId
      required: true
      schema:
        type: integer
        format: int32
        example: 2
    
    idPathParam:
      in: path
      name: id
      required: true
      description: id
      schema:
        type: integer
        format: int32
        example: 2